"use strict"

var lib = {}
module.exports = lib

lib.types = {
    api: 'chain-api-error',
    connectivity: 'connectivity-error',
    json: 'chain-json-error'
}

// API errors describe errors that are codified by the Chain API. They have
// an error code, a message, and an optional detail field that provides
// additional context for the error.
lib.newApiError = function (opts) {
    var err = new Error(formatAPIErrorMsg(opts))
    err.chainErrorType = lib.types.api
    err.code = opts.code
    err.chainMessage = opts.message
    err.detail = opts.detail
    err.requestID = opts.requestID
    err.resp = opts.resp

    return err
}

// Connectivity errors arise when an HTTP response is received, but it does not
// contain headers that are included in all Chain API responses. This could
// arise due to a badly-configured proxy, or other upstream network issues.
lib.newConnectivityError = function (opts) {
    var err = new Error("Response HTTP header field Chain-Request-ID is unset. There may be network issues. Please check your local network settings.")
    err.chainErrorType = lib.types.connectivity
    err.resp = opts.resp
    return err
}

// JSON parsing errors should be very rare, and will only arise if there is a
// bug in the Chain API, or if the upstream server is spoofing common Chain API
// response headers.
lib.newJsonError = function (opts) {
    var err = new Error("Error decoding JSON response. Request-ID: " + opts.requestID)
    err.chainErrorType = lib.types.json
    err.requestID = opts.requestID
    err.cause = opts.cause
    err.resp = opts.resp
    return err
}

// Batched responses interleave success results with legitimate responses. Use
// this lib.to = function determine if an item in a batch result is an error.
lib.isBatchError = function (v) {
    return v && v.code && !v.stack
}

// Formats an error result in a batch response into a human-readable error
// message. Returns null if the given argument is not actually a batch error
// item.
lib.batchErrorMsg = function (v) {
    if (!lib.isBatchError(v)) {
        return null
    }
    return formatAPIErrorMsg(v)
}

// Formats a human-readable summary for API errors.
function formatAPIErrorMsg(v) {
    var tokens = []

    if (typeof v.code === 'string' && v.code.length > 0) {
        tokens.push('Code: ' + v.code)
    }

    tokens.push('Message: ' + v.message)

    if (typeof v.detail === 'string' && v.detail.length > 0) {
        tokens.push('Detail: ' + v.detail)
    }

    tokens.push('Request-ID: ' + v.requestID)

    return tokens.join(' ')
}
