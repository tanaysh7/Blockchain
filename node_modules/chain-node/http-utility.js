"use strict"
var request = require('request')
var errors = require('./errors')
var pkgConfig = require('./package.json')

var URL = 'https://x.chain.com'

module.exports = HttpUtility

function HttpUtility(c) {
    if (!c.url) {
        c.url = URL
    }
    this.url = c.url
    this.auth = c.auth
    this.timeout = c.timeout
}

HttpUtility.prototype.makeRequest = function (config, cb) {
    var r = {
        strictSSL: true,
        auth: this.auth,
        method: config.method,
        uri: this.url + config.path,
        timeout: this.timeout,
        headers: config.headers || {},
    }

    if (config.body) {
        r.body = JSON.stringify(config.body)
        r.headers['content-type'] = 'application/json'
    }

    r.headers['user-agent'] = pkgConfig.name + '/' + pkgConfig.version

    if (config.query) {
        r.qs = config.query
    }

    request(r, function (err, resp, body) {
        if (err) {
            return cb(err)
        }

        var requestID = resp.headers['chain-request-id']

        if (!requestID) {
            return cb(errors.newConnectivityError({
                resp: resp
            }))
        }

        try {
            body = JSON.parse(body)
        } catch (err) {
            return cb(errors.newJsonError({
                requestID: requestID,
                cause: err,
                resp: resp
            }))
        }

        if (Math.floor(resp.statusCode / 100) !== 2) {
            return cb(errors.newApiError({
                requestID: requestID,
                code: body.code,
                message: body.message,
                body: body.detail,
                resp: resp
            }))
        }

        cb(null, body, resp)
    })
}

HttpUtility.prototype.post = function (path, body, cb) {
    this.makeRequest({
        method: 'POST',
        path: path,
        body: body
    }, cb)
}

HttpUtility.prototype.put = function (path, body, cb) {
    this.makeRequest({
        method: 'PUT',
        path: path,
        body: body
    }, cb)
}

HttpUtility.prototype.delete = function (path, cb) {
    this.makeRequest({
        method: 'DELETE',
        path: path
    }, cb)
}

HttpUtility.prototype.get = function (path, query, cb) {
    if (typeof query === 'function') {
        cb = query
        query = null
    }

    this.makeRequest({
        method: 'GET',
        path: path,
        query: query
    }, cb)
}
